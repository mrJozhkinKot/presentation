!function(n){function e(e){for(var o,s,r=e[0],c=e[1],d=e[2],l=0,p=[];l<r.length;l++)s=r[l],Object.prototype.hasOwnProperty.call(a,s)&&a[s]&&p.push(a[s][0]),a[s]=0;for(o in c)Object.prototype.hasOwnProperty.call(c,o)&&(n[o]=c[o]);for(u&&u(e);p.length;)p.shift()();return i.push.apply(i,d||[]),t()}function t(){for(var n,e=0;e<i.length;e++){for(var t=i[e],o=!0,r=1;r<t.length;r++){var c=t[r];0!==a[c]&&(o=!1)}o&&(i.splice(e--,1),n=s(s.s=t[0]))}return n}var o={},a={0:0},i=[];function s(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.m=n,s.c=o,s.d=function(n,e,t){s.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},s.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},s.t=function(n,e){if(1&e&&(n=s(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)s.d(t,o,function(e){return n[e]}.bind(null,o));return t},s.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return s.d(e,"a",e),e},s.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},s.p="";var r=window.webpackJsonp=window.webpackJsonp||[],c=r.push.bind(r);r.push=e,r=r.slice();for(var d=0;d<r.length;d++)e(r[d]);var u=c;i.push([2,1]),t()}([,function(n,e){n.exports="<section data-transition=slide data-background=images/sound-wave.jpg data-background-opacity=0.4><h2 style=color:#95cfff>Web Audio API</h2></section>"},function(n,e,t){"use strict";t.r(e);var o=t(0),a=t.n(o),i=t(1),s=t.n(i);t(5);document.body.innerHTML=`<div class="reveal">\n<div class="slides">\n   ${s.a}\n\n   <section>\n   <p>The Web Audio API provides a powerful and versatile system for controlling audio on the Web, allowing\n     developers to choose audio sources, add effects to audio, create audio visualizations and much more.\n   </p>\n </section>\n\n <section>\n   <section data-background='#fff'>\n     <img src="images/audio-history.jpg" alt="audio-history" style="width: 100%">\n   </section>\n   <section>\n     <p>The Web Audio API involves handling audio operations inside an audio context,\n       and has been designed to allow modular routing. Basic audio operations are performed\n       with audio nodes, which are linked together to form an audio routing graph.\n     </p>\n   </section>\n   <section>\n     <p>Audio nodes are linked into chains and simple webs by their inputs and outputs. They typically\n       start\n       with one or more sources. Sources provide arrays of sound intensities (samples) at very small\n       timeslices,\n       often tens of thousands of them per second.\n     </p>\n   </section>\n </section>\n <section>\n   <img src="images/audio-context.png" alt="audio-context">\n   <pre class="fragment" style="width: 100%;"><code class="hljs" data-trim >\n     var context = new (window.AudioContext || window.webkitAudioContext)();\n   </code></pre>\n </section>\n <section id="fragments">\n   <h3> There are three types of sources:</h3>\n   <ul>\n     <li class="fragment"><span>Oscillator</span> <span class="fragment">\n         – mathematically computed sounds</span></li>\n     <li class="fragment"><span>Audio Samples</span> <span class="fragment">\n         – from audio/video files</span></li>\n     <li class="fragment"><span>Audio Stream</span> <span class="fragment">\n         – audio from webcam or microphone</span></li>\n   </ul>\n </section>\n <section>\n   <h3>oscillator</h3>\n   <img src="images/waveforms.png" alt="waveforms" class="fragment" style="width: 70%;">\n   <pre class="fragment"><code class="hljs livescript" data-trim >\nOscillatorNode.type = 'sine'|'square'|'triangle'|'sawtooth';\n</code>\n     </pre>\n\n </section>\n <section>\n   <pre style="width:100%"><code class="hljs" data-trim data-line-numbers="1|2|3|4|5|6">\nvar context = new (window.AudioContext || window.webkitAudioContext)();\nvar oscillator = context.createOscillator();\noscillator.type = 'sine';\noscillator.frequency.value = 440;\noscillator.connect(context.destination);\noscillator.start();\n</code>\n   </pre>\n </section>\n <section>\n   <h3>Timing of Web Audio API</h3>\n   <pre class="fragment"><code class="hljs" data-trim >\nvar now = context.currentTime;\noscillator.play(now + 1);\noscillator.stop(now + 3);\n     </code>\n   </pre>\n   <p class="fragment">AudioParam.setValueAtTime(value, startTime)</p>\n   <pre style="width:100%" class="fragment"><code class="hljs" data-trim >\n     oscillator.frequency.setValueAtTime(261.6, context.currentTime + 1);\n             </code>\n           </pre>\n\n   <p class="fragment">AudioParam.exponentialRampToValueAtTime(value, endTime)</p>\n   <pre style="width:100%" class="fragment"><code class="hljs" data-trim >\n             gain.gain.exponentialRampToValueAtTime(0.001, context.currentTime + 1);\n                     </code>\n                   </pre>\n </section>\n <section>\n   <section>\n     <h3>recorded sound</h3>\n\n     <p class="fragment">loading a sound sample</p>\n     <pre class="fragment" style="width: 105%"><code class="hljs" data-trim style="max-height: 1200px" >\n     var dogBarkingBuffer = null;\n     // Fix up prefixing\n     window.AudioContext = window.AudioContext || window.webkitAudioContext;\n     var context = new AudioContext();\n\n     function loadDogSound(url) {\n     var request = new XMLHttpRequest();\n     request.open('GET', url, true);\n     request.responseType = 'arraybuffer';\n\n     // Decode asynchronously\n     request.onload = function() {\n       context.decodeAudioData(request.response, function(buffer) {\n       dogBarkingBuffer = buffer;\n       }, onError);\n     }\n     request.send();\n     }\n     </code></pre>\n\n   </section>\n\n   <section>\n     <h4>Playing sounds</h4>\n     <pre style="width: 105%"><code class="hljs" data-trim >\n   // Fix up prefixing\n   window.AudioContext = window.AudioContext || window.webkitAudioContext;\n   var context = new AudioContext();\n   \n   function playSound(buffer) {\n     var source = context.createBufferSource(); // creates a sound source\n     source.buffer = buffer;                    // tell which sound to play\n     source.connect(context.destination);       // connect to the destination \n     source.start(0);                           // play the source now\t\t\t\t\t\t\t\t\t\t\t\t\n   }\n   \n   </code></pre>\n   </section>\n   <section>\n     <h4>Changing the volume of a sound</h4>\n     <pre style="width: 105%"><code class="hljs" data-trim >\n   // Create a gain node.\n   var gainNode = context.createGain();\n   // Connect the source to the gain node.\n   source.connect(gainNode);\n   // Connect the gain node to the destination.\n   gainNode.connect(context.destination);\n   // Reduce the volume.\n   gainNode.gain.value = 0.5;\n   </code></pre>\n   </section>\n </section>\n <section>\n   <section>\n     <img src="images/audio-context-multi.png" alt="audio-context-multi" style="width: 60%">\n   </section>\n   <section>\n     <h4>Abstracting the Web Audio API</h4>\n     <pre class="fragment" style="width: 105%"><code class="hljs" data-trim  style="max-height: 1200px">\n   window.onload = init;\n   var context;\n   var bufferLoader;\n   function init() {\n     context = new webkitAudioContext();\n     bufferLoader = new BufferLoader(\n     context,\n     [ '../sounds/hyper-reality/br-jam-loop.wav',\n       '../sounds/hyper-reality/laughter.wav', ],\n     finishedLoading\n     );\n   bufferLoader.load();\n   }\n   function finishedLoading(bufferList) {\n     // Create two sources and play them both together.\n     var source1 = context.createBufferSource();\n     var source2 = context.createBufferSource();\n     source1.buffer = bufferList[0];\n     source2.buffer = bufferList[1];\n     source1.connect(context.destination);\n     source2.connect(context.destination);\n     source1.start(0);\n     source2.start(0);\n   }\n   \n   </code></pre>\n   </section>\n </section>\n <section data-background="images/sound-wave2.jpg" data-background-opacity="0.4"  data-background-transition="convex">\n   <p>Thank you</p>\n </section>\n\n </section>\n\n </div>\n</div>`,a.a.initialize({controls:!0,touch:!0,dependencies:[{src:"plugin/highlight/highlight.js",async:!0},{src:"plugin/notes/notes.js",async:!0}]})},,,function(n,e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(e,t,r){var n,a;
/*!
 * reveal.js
 * http://revealjs.com
 * MIT licensed
 *
 * Copyright (C) 2020 Hakim El Hattab, http://hakim.se
 */a=this,void 0===(n=function(){return a.Reveal=function(){"use strict";var e,t,r,n,a,i,o,s,l,c=navigator.userAgent,d=/registerPlugin|registerKeyboardShortcut|addKeyBinding|addEventListener/,u={width:960,height:700,margin:.04,minScale:.2,maxScale:2,controls:!0,controlsTutorial:!0,controlsLayout:"bottom-right",controlsBackArrows:"faded",progress:!0,slideNumber:!1,showSlideNumber:"all",hashOneBasedIndex:!1,hash:!1,history:!1,keyboard:!0,keyboardCondition:null,overview:!0,disableLayout:!1,center:!0,touch:!0,loop:!1,rtl:!1,navigationMode:"default",shuffle:!1,fragments:!0,fragmentInURL:!1,embedded:!1,help:!0,pause:!0,showNotes:!1,autoPlayMedia:null,preloadIframes:null,autoSlide:0,autoSlideStoppable:!0,autoSlideMethod:null,defaultTiming:null,mouseWheel:!1,rollingLinks:!1,hideAddressBar:!0,previewLinks:!1,postMessage:!0,postMessageEvents:!1,focusBodyOnPageVisibilityChange:!0,transition:"slide",transitionSpeed:"default",backgroundTransition:"fade",parallaxBackgroundImage:"",parallaxBackgroundSize:"",parallaxBackgroundRepeat:"",parallaxBackgroundPosition:"",parallaxBackgroundHorizontal:null,parallaxBackgroundVertical:null,pdfMaxPagesPerSlide:Number.POSITIVE_INFINITY,pdfSeparateFragments:!0,pdfPageHeightOffset:-1,viewDistance:3,mobileViewDistance:2,display:"block",hideInactiveCursor:!0,hideCursorTime:5e3,dependencies:[]},p=!1,f=!1,v=!1,h=null,g=null,m=!1,b=!1,y=[],w=1,A={layout:"",overview:""},k={},L={},E=[],S={},x=0,q=0,M=!1,N=0,I=!1,T=0,P=0,C=-1,H=!1,R={startX:0,startY:0,startCount:0,captured:!1,threshold:40},B={},z={};function D(){var e=Object.keys(L).length;if(0===e)O();else{var t=function(){0==--e&&O()};for(var r in L){var n=L[r];if("function"==typeof n.init){var a=n.init();a&&"function"==typeof a.then?a.then(t):t()}else t()}}}function O(){var n;E.length&&E.forEach((function(e){W(e.src,e.callback)})),f=!0,k.slides.classList.add("no-transition"),o?k.wrapper.classList.add("no-hover"):k.wrapper.classList.remove("no-hover"),/iphone/gi.test(c)?k.wrapper.classList.add("ua-iphone"):k.wrapper.classList.remove("ua-iphone"),k.background=V(k.wrapper,"div","backgrounds",null),k.progress=V(k.wrapper,"div","progress","<span></span>"),k.progressbar=k.progress.querySelector("span"),k.controls=V(k.wrapper,"aside","controls",'<button class="navigate-left" aria-label="previous slide"><div class="controls-arrow"></div></button><button class="navigate-right" aria-label="next slide"><div class="controls-arrow"></div></button><button class="navigate-up" aria-label="above slide"><div class="controls-arrow"></div></button><button class="navigate-down" aria-label="below slide"><div class="controls-arrow"></div></button>'),k.slideNumber=V(k.wrapper,"div","slide-number",""),k.speakerNotes=V(k.wrapper,"div","speaker-notes",null),k.speakerNotes.setAttribute("data-prevent-swipe",""),k.speakerNotes.setAttribute("tabindex","0"),k.pauseOverlay=V(k.wrapper,"div","pause-overlay",u.controls?'<button class="resume-button">Resume presentation</button>':null),k.wrapper.setAttribute("role","application"),k.controlsLeft=J(document.querySelectorAll(".navigate-left")),k.controlsRight=J(document.querySelectorAll(".navigate-right")),k.controlsUp=J(document.querySelectorAll(".navigate-up")),k.controlsDown=J(document.querySelectorAll(".navigate-down")),k.controlsPrev=J(document.querySelectorAll(".navigate-prev")),k.controlsNext=J(document.querySelectorAll(".navigate-next")),k.controlsRightArrow=k.controls.querySelector(".navigate-right"),k.controlsDownArrow=k.controls.querySelector(".navigate-down"),k.statusDiv=((n=document.getElementById("aria-status-div"))||((n=document.createElement("div")).style.position="absolute",n.style.height="1px",n.style.width="1px",n.style.overflow="hidden",n.style.clip="rect( 1px, 1px, 1px, 1px )",n.setAttribute("id","aria-status-div"),n.setAttribute("aria-live","polite"),n.setAttribute("aria-atomic","true"),k.wrapper.appendChild(n)),n),u.postMessage&&window.addEventListener("message",(function(t){var r=t.data;if("string"==typeof r&&"{"===r.charAt(0)&&"}"===r.charAt(r.length-1)&&(r=JSON.parse(r)).method&&"function"==typeof e[r.method])if(!1===d.test(r.method)){var n=e[r.method].apply(e,r.args);oe("callback",{method:r.method,result:n})}else console.warn('reveal.js: "'+r.method+'" is is blacklisted from the postMessage API')}),!1),setInterval((function(){0===k.wrapper.scrollTop&&0===k.wrapper.scrollLeft||(k.wrapper.scrollTop=0,k.wrapper.scrollLeft=0)}),1e3),J(k.wrapper.querySelectorAll(".slides>section")).forEach((function(e){J(e.querySelectorAll("section")).forEach((function(e,t){t>0&&(e.classList.remove("present"),e.classList.remove("past"),e.classList.add("future"),e.setAttribute("aria-hidden","true"))}))})),Y(),nt(),Ve(!0),setTimeout((function(){k.slides.classList.remove("no-transition"),k.wrapper.classList.add("ready"),ie("ready",{indexh:t,indexv:r,currentSlide:a})}),1),ne()&&(_(),"complete"===document.readyState?U():window.addEventListener("load",U))}function W(e,t){var r=document.createElement("script");r.type="text/javascript",r.async=!1,r.defer=!1,r.src=e,t&&(r.onload=r.onreadystatechange=function(e){("load"===e.type||/loaded|complete/.test(r.readyState))&&(r.onload=r.onreadystatechange=r.onerror=null,t())},r.onerror=function(e){r.onload=r.onreadystatechange=r.onerror=null,t(new Error("Failed loading script: "+r.src+"\n"+e))});var n=document.querySelector("head");n.insertBefore(r,n.lastChild)}function F(e){var t="";if(3===e.nodeType)t+=e.textContent;else if(1===e.nodeType){var r=e.getAttribute("aria-hidden"),n="none"===window.getComputedStyle(e).display;"true"===r||n||J(e.childNodes).forEach((function(e){t+=F(e)}))}return t}function U(){var e=ve(window.innerWidth,window.innerHeight),t=Math.floor(e.width*(1+u.margin)),r=Math.floor(e.height*(1+u.margin)),n=e.width,a=e.height;ee("@page{size:"+t+"px "+r+"px; margin: 0px;}"),ee(".reveal section>img, .reveal section>video, .reveal section>iframe{max-width: "+n+"px; max-height:"+a+"px}"),document.body.classList.add("print-pdf"),document.body.style.width=t+"px",document.body.style.height=r+"px",fe(n,a);var i=u.slideNumber&&/all|print/i.test(u.showSlideNumber);J(k.wrapper.querySelectorAll(".slides section")).forEach((function(e){e.setAttribute("data-slide-number",Fe(e))})),J(k.wrapper.querySelectorAll(".slides section")).forEach((function(e){if(!1===e.classList.contains("stack")){var o=(t-n)/2,s=(r-a)/2,l=e.scrollHeight,c=Math.max(Math.ceil(l/r),1);(1===(c=Math.min(c,u.pdfMaxPagesPerSlide))&&u.center||e.classList.contains("center"))&&(s=Math.max((r-l)/2,0));var d=document.createElement("div");if(d.className="pdf-page",d.style.height=(r+u.pdfPageHeightOffset)*c+"px",e.parentNode.insertBefore(d,e),d.appendChild(e),e.style.left=o+"px",e.style.top=s+"px",e.style.width=n+"px",e.slideBackgroundElement&&d.insertBefore(e.slideBackgroundElement,e),u.showNotes){var p=vt(e);if(p){var f="string"==typeof u.showNotes?u.showNotes:"inline",v=document.createElement("div");v.classList.add("speaker-notes"),v.classList.add("speaker-notes-pdf"),v.setAttribute("data-layout",f),v.innerHTML=p,"separate-page"===f?d.parentNode.insertBefore(v,d.nextSibling):(v.style.left="8px",v.style.bottom="8px",v.style.width=t-16+"px",d.appendChild(v))}}if(i){var h=document.createElement("div");h.classList.add("slide-number"),h.classList.add("slide-number-pdf"),h.innerHTML=e.getAttribute("data-slide-number"),d.appendChild(h)}if(u.pdfSeparateFragments){var g,m,b=gt(d.querySelectorAll(".fragment"),!0);b.forEach((function(e){g&&g.forEach((function(e){e.classList.remove("current-fragment")})),e.forEach((function(e){e.classList.add("visible","current-fragment")}));var t=d.cloneNode(!0);d.parentNode.insertBefore(t,(m||d).nextSibling),g=e,m=t})),b.forEach((function(e){e.forEach((function(e){e.classList.remove("visible","current-fragment")}))}))}else J(d.querySelectorAll(".fragment:not(.fade-out)")).forEach((function(e){e.classList.add("visible")}))}})),ie("pdf-ready")}function V(e,t,r,n){for(var a=e.querySelectorAll("."+r),i=0;i<a.length;i++){var o=a[i];if(o.parentNode===e)return o}var s=document.createElement(t);return s.className=r,"string"==typeof n&&(s.innerHTML=n),e.appendChild(s),s}function K(e,t){var r=document.createElement("div");r.className="slide-background "+e.className.replace(/present|past|future/,"");var n=document.createElement("div");return n.className="slide-background-content",r.appendChild(n),t.appendChild(r),e.slideBackgroundElement=r,e.slideBackgroundContentElement=n,j(e),r}function j(e){var t=e.slideBackgroundElement,r=e.slideBackgroundContentElement;e.classList.remove("has-dark-background"),e.classList.remove("has-light-background"),t.removeAttribute("data-loaded"),t.removeAttribute("data-background-hash"),t.removeAttribute("data-background-size"),t.removeAttribute("data-background-transition"),t.style.backgroundColor="",r.style.backgroundSize="",r.style.backgroundRepeat="",r.style.backgroundPosition="",r.style.backgroundImage="",r.style.opacity="",r.innerHTML="";var n={background:e.getAttribute("data-background"),backgroundSize:e.getAttribute("data-background-size"),backgroundImage:e.getAttribute("data-background-image"),backgroundVideo:e.getAttribute("data-background-video"),backgroundIframe:e.getAttribute("data-background-iframe"),backgroundColor:e.getAttribute("data-background-color"),backgroundRepeat:e.getAttribute("data-background-repeat"),backgroundPosition:e.getAttribute("data-background-position"),backgroundTransition:e.getAttribute("data-background-transition"),backgroundOpacity:e.getAttribute("data-background-opacity")};n.background&&(/^(http|file|\/\/)/gi.test(n.background)||/\.(svg|png|jpg|jpeg|gif|bmp)([?#\s]|$)/gi.test(n.background)?e.setAttribute("data-background-image",n.background):t.style.background=n.background),(n.background||n.backgroundColor||n.backgroundImage||n.backgroundVideo||n.backgroundIframe)&&t.setAttribute("data-background-hash",n.background+n.backgroundSize+n.backgroundImage+n.backgroundVideo+n.backgroundIframe+n.backgroundColor+n.backgroundRepeat+n.backgroundPosition+n.backgroundTransition+n.backgroundOpacity),n.backgroundSize&&t.setAttribute("data-background-size",n.backgroundSize),n.backgroundColor&&(t.style.backgroundColor=n.backgroundColor),n.backgroundTransition&&t.setAttribute("data-background-transition",n.backgroundTransition),e.hasAttribute("data-preload")&&t.setAttribute("data-preload",""),n.backgroundSize&&(r.style.backgroundSize=n.backgroundSize),n.backgroundRepeat&&(r.style.backgroundRepeat=n.backgroundRepeat),n.backgroundPosition&&(r.style.backgroundPosition=n.backgroundPosition),n.backgroundOpacity&&(r.style.opacity=n.backgroundOpacity);var a,i=n.backgroundColor;if(!i){var o=window.getComputedStyle(t);o&&o.backgroundColor&&(i=o.backgroundColor)}if(i){var s=re(i);s&&0!==s.a&&("string"==typeof(a=i)&&(a=re(a)),(a?(299*a.r+587*a.g+114*a.b)/1e3:null)<128?e.classList.add("has-dark-background"):e.classList.add("has-light-background"))}}function Y(e){var t=u.transition;if("object"==typeof e&&$(u,e),!1!==f){var r=k.wrapper.querySelectorAll(".slides section").length;k.wrapper.classList.remove(t),!1===S.transforms3d&&(u.transition="linear"),k.wrapper.classList.add(u.transition),k.wrapper.setAttribute("data-transition-speed",u.transitionSpeed),k.wrapper.setAttribute("data-background-transition",u.backgroundTransition),k.controls.style.display=u.controls?"block":"none",k.progress.style.display=u.progress?"block":"none",k.controls.setAttribute("data-controls-layout",u.controlsLayout),k.controls.setAttribute("data-controls-back-arrows",u.controlsBackArrows),u.shuffle&&Re(),u.rtl?k.wrapper.classList.add("rtl"):k.wrapper.classList.remove("rtl"),u.center?k.wrapper.classList.add("center"):k.wrapper.classList.remove("center"),!1===u.pause&&Me(),u.showNotes&&k.speakerNotes.setAttribute("data-layout","string"==typeof u.showNotes?u.showNotes:"inline"),u.mouseWheel?(document.addEventListener("DOMMouseScroll",Ut,!1),document.addEventListener("mousewheel",Ut,!1)):(document.removeEventListener("DOMMouseScroll",Ut,!1),document.removeEventListener("mousewheel",Ut,!1)),u.rollingLinks?function(){if(S.transforms3d&&!("msPerspective"in document.body.style))for(var e=k.wrapper.querySelectorAll(".slides section a"),t=0,r=e.length;t<r;t++){var n=e[t];if(n.textContent&&!n.querySelector("*")&&(!n.className||!n.classList.contains(n,"roll"))){var a=document.createElement("span");a.setAttribute("data-title",n.text),a.innerHTML=n.innerHTML,n.classList.add("roll"),n.innerHTML="",n.appendChild(a)}}}():function(){for(var e=k.wrapper.querySelectorAll(".slides section a.roll"),t=0,r=e.length;t<r;t++){var n=e[t],a=n.querySelector("span");a&&(n.classList.remove("roll"),n.innerHTML=a.innerHTML)}}(),u.hideInactiveCursor?(document.addEventListener("mousemove",Ct,!1),document.addEventListener("mousedown",Ct,!1)):(Se(),document.removeEventListener("mousemove",Ct,!1),document.removeEventListener("mousedown",Ct,!1)),u.previewLinks?(se(),le("[data-preview-link=false]")):(le(),se("[data-preview-link]:not([data-preview-link=false])")),l&&(l.destroy(),l=null),r>1&&u.autoSlide&&u.autoSlideStoppable&&S.canvas&&S.requestAnimationFrame&&((l=new rr(k.wrapper,(function(){return Math.min(Math.max((Date.now()-C)/T,0),1)}))).on("click",tr),H=!1),!1===u.fragments&&J(k.slides.querySelectorAll(".fragment")).forEach((function(e){e.classList.add("visible"),e.classList.remove("current-fragment")}));var n="none";u.slideNumber&&!ne()&&("all"===u.showSlideNumber||"speaker"===u.showSlideNumber&&rt())&&(n="block"),k.slideNumber.style.display=n,"default"!==u.navigationMode?k.wrapper.setAttribute("data-navigation-mode",u.navigationMode):k.wrapper.removeAttribute("data-navigation-mode"),"linear"===u.navigationMode?(B["&#8594;  ,  &#8595;  ,  SPACE  ,  N  ,  L  ,  J"]="Next slide",B["&#8592;  ,  &#8593;  ,  P  ,  H  ,  K"]="Previous slide"):(B["N  ,  SPACE"]="Next slide",B.P="Previous slide",B["&#8592;  ,  H"]="Navigate left",B["&#8594;  ,  L"]="Navigate right",B["&#8593;  ,  K"]="Navigate up",B["&#8595;  ,  J"]="Navigate down"),B["Home  ,  Shift &#8592;"]="First slide",B["End  ,  Shift &#8594;"]="Last slide",B["B  ,  ."]="Pause",B.F="Fullscreen",B["ESC, O"]="Slide overview",Ce()}}function X(){var e;I=!0,window.addEventListener("hashchange",Jt,!1),window.addEventListener("resize",Qt,!1),u.touch&&("onpointerdown"in window?(k.wrapper.addEventListener("pointerdown",Ot,!1),k.wrapper.addEventListener("pointermove",Wt,!1),k.wrapper.addEventListener("pointerup",Ft,!1)):window.navigator.msPointerEnabled?(k.wrapper.addEventListener("MSPointerDown",Ot,!1),k.wrapper.addEventListener("MSPointerMove",Wt,!1),k.wrapper.addEventListener("MSPointerUp",Ft,!1)):(k.wrapper.addEventListener("touchstart",Bt,!1),k.wrapper.addEventListener("touchmove",zt,!1),k.wrapper.addEventListener("touchend",Dt,!1))),u.keyboard&&(document.addEventListener("keydown",Rt,!1),document.addEventListener("keypress",Ht,!1)),u.progress&&k.progress&&k.progress.addEventListener("click",Vt,!1),k.pauseOverlay.addEventListener("click",Me,!1),u.focusBodyOnPageVisibilityChange&&("hidden"in document?e="visibilitychange":"msHidden"in document?e="msvisibilitychange":"webkitHidden"in document&&(e="webkitvisibilitychange"),e&&document.addEventListener(e,Zt,!1));var t=["touchstart","click"];c.match(/android/gi)&&(t=["touchstart"]),t.forEach((function(e){k.controlsLeft.forEach((function(t){t.addEventListener(e,Kt,!1)})),k.controlsRight.forEach((function(t){t.addEventListener(e,jt,!1)})),k.controlsUp.forEach((function(t){t.addEventListener(e,Yt,!1)})),k.controlsDown.forEach((function(t){t.addEventListener(e,Xt,!1)})),k.controlsPrev.forEach((function(t){t.addEventListener(e,_t,!1)})),k.controlsNext.forEach((function(t){t.addEventListener(e,$t,!1)}))}))}function _(){I=!1,document.removeEventListener("keydown",Rt,!1),document.removeEventListener("keypress",Ht,!1),window.removeEventListener("hashchange",Jt,!1),window.removeEventListener("resize",Qt,!1),k.wrapper.removeEventListener("pointerdown",Ot,!1),k.wrapper.removeEventListener("pointermove",Wt,!1),k.wrapper.removeEventListener("pointerup",Ft,!1),k.wrapper.removeEventListener("MSPointerDown",Ot,!1),k.wrapper.removeEventListener("MSPointerMove",Wt,!1),k.wrapper.removeEventListener("MSPointerUp",Ft,!1),k.wrapper.removeEventListener("touchstart",Bt,!1),k.wrapper.removeEventListener("touchmove",zt,!1),k.wrapper.removeEventListener("touchend",Dt,!1),k.pauseOverlay.removeEventListener("click",Me,!1),u.progress&&k.progress&&k.progress.removeEventListener("click",Vt,!1),["touchstart","click"].forEach((function(e){k.controlsLeft.forEach((function(t){t.removeEventListener(e,Kt,!1)})),k.controlsRight.forEach((function(t){t.removeEventListener(e,jt,!1)})),k.controlsUp.forEach((function(t){t.removeEventListener(e,Yt,!1)})),k.controlsDown.forEach((function(t){t.removeEventListener(e,Xt,!1)})),k.controlsPrev.forEach((function(t){t.removeEventListener(e,_t,!1)})),k.controlsNext.forEach((function(t){t.removeEventListener(e,$t,!1)}))}))}function $(e,t){for(var r in t)e[r]=t[r];return e}function J(e){return Array.prototype.slice.call(e)}function Q(e){if("string"==typeof e){if("null"===e)return null;if("true"===e)return!0;if("false"===e)return!1;if(e.match(/^-?[\d\.]+$/))return parseFloat(e)}return e}function Z(e,t){e.style.WebkitTransform=t,e.style.MozTransform=t,e.style.msTransform=t,e.style.transform=t}function G(e){"string"==typeof e.layout&&(A.layout=e.layout),"string"==typeof e.overview&&(A.overview=e.overview),A.layout?Z(k.slides,A.layout+" "+A.overview):Z(k.slides,A.overview)}function ee(e){var t=document.createElement("style");t.type="text/css",t.styleSheet?t.styleSheet.cssText=e:t.appendChild(document.createTextNode(e)),document.getElementsByTagName("head")[0].appendChild(t)}function te(e,t){for(var r=e.parentNode;r;){var n=r.matches||r.matchesSelector||r.msMatchesSelector;if(n&&n.call(r,t))return r;r=r.parentNode}return null}function re(e){var t=e.match(/^#([0-9a-f]{3})$/i);if(t&&t[1])return t=t[1],{r:17*parseInt(t.charAt(0),16),g:17*parseInt(t.charAt(1),16),b:17*parseInt(t.charAt(2),16)};var r=e.match(/^#([0-9a-f]{6})$/i);if(r&&r[1])return r=r[1],{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16)};var n=e.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);if(n)return{r:parseInt(n[1],10),g:parseInt(n[2],10),b:parseInt(n[3],10)};var a=e.match(/^rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\,\s*([\d]+|[\d]*.[\d]+)\s*\)$/i);return a?{r:parseInt(a[1],10),g:parseInt(a[2],10),b:parseInt(a[3],10),a:parseFloat(a[4])}:null}function ne(){return/print-pdf/gi.test(window.location.search)}function ae(){setTimeout((function(){window.scrollTo(0,1)}),10)}function ie(e,t){var r=document.createEvent("HTMLEvents",1,2);r.initEvent(e,!0,!0),$(r,t),k.wrapper.dispatchEvent(r),oe(e)}function oe(e,t){if(u.postMessageEvents&&window.parent!==window.self){var r={namespace:"reveal",eventName:e,state:ht()};$(r,t),window.parent.postMessage(JSON.stringify(r),"*")}}function se(e){J(document.querySelectorAll(e||"a")).forEach((function(e){/^(http|www)/gi.test(e.getAttribute("href"))&&e.addEventListener("click",er,!1)}))}function le(e){J(document.querySelectorAll(e||"a")).forEach((function(e){/^(http|www)/gi.test(e.getAttribute("href"))&&e.removeEventListener("click",er,!1)}))}function ce(e){"boolean"==typeof e?e?de():ue():k.overlay?ue():de()}function de(){if(u.help){ue(),k.overlay=document.createElement("div"),k.overlay.classList.add("overlay"),k.overlay.classList.add("overlay-help"),k.wrapper.appendChild(k.overlay);var e='<p class="title">Keyboard Shortcuts</p><br/>';for(var t in e+="<table><th>KEY</th><th>ACTION</th>",B)e+="<tr><td>"+t+"</td><td>"+B[t]+"</td></tr>";for(var r in z)z[r].key&&z[r].description&&(e+="<tr><td>"+z[r].key+"</td><td>"+z[r].description+"</td></tr>");e+="</table>",k.overlay.innerHTML=["<header>",'<a class="close" href="#"><span class="icon"></span></a>',"</header>",'<div class="viewport">','<div class="viewport-inner">'+e+"</div>","</div>"].join(""),k.overlay.querySelector(".close").addEventListener("click",(function(e){ue(),e.preventDefault()}),!1),setTimeout((function(){k.overlay.classList.add("visible")}),1)}}function ue(){k.overlay&&(k.overlay.parentNode.removeChild(k.overlay),k.overlay=null)}function pe(){if(k.wrapper&&!ne()){if(!u.disableLayout){o&&document.documentElement.style.setProperty("--vh",.01*window.innerHeight+"px");var e=ve(),t=w;fe(u.width,u.height),k.slides.style.width=e.width+"px",k.slides.style.height=e.height+"px",w=Math.min(e.presentationWidth/e.width,e.presentationHeight/e.height),w=Math.max(w,u.minScale),1===(w=Math.min(w,u.maxScale))?(k.slides.style.zoom="",k.slides.style.left="",k.slides.style.top="",k.slides.style.bottom="",k.slides.style.right="",G({layout:""})):w>1&&S.zoom&&window.devicePixelRatio<2?(k.slides.style.zoom=w,k.slides.style.left="",k.slides.style.top="",k.slides.style.bottom="",k.slides.style.right="",G({layout:""})):(k.slides.style.zoom="",k.slides.style.left="50%",k.slides.style.top="50%",k.slides.style.bottom="auto",k.slides.style.right="auto",G({layout:"translate(-50%, -50%) scale("+w+")"}));for(var r=J(k.wrapper.querySelectorAll(".slides section")),n=0,a=r.length;n<a;n++){var i=r[n];"none"!==i.style.display&&(u.center||i.classList.contains("center")?i.classList.contains("stack")?i.style.top=0:i.style.top=Math.max((e.height-i.scrollHeight)/2,0)+"px":i.style.top="")}t!==w&&ie("resize",{oldScale:t,scale:w,size:e})}Oe(),Ke(),ke()&&ye()}}function fe(e,t){J(k.slides.querySelectorAll("section > .stretch")).forEach((function(r){var n=function(e,t){if(t=t||0,e){var r,n=e.style.height;return e.style.height="0px",e.parentNode.style.height="auto",r=t-e.parentNode.offsetHeight,e.style.height=n+"px",e.parentNode.style.removeProperty("height"),r}return t}(r,t);if(/(img|video)/gi.test(r.nodeName)){var a=r.naturalWidth||r.videoWidth,i=r.naturalHeight||r.videoHeight,o=Math.min(e/a,n/i);r.style.width=a*o+"px",r.style.height=i*o+"px"}else r.style.width=e+"px",r.style.height=n+"px"}))}function ve(e,t){var r={width:u.width,height:u.height,presentationWidth:e||k.wrapper.offsetWidth,presentationHeight:t||k.wrapper.offsetHeight};return r.presentationWidth-=r.presentationWidth*u.margin,r.presentationHeight-=r.presentationHeight*u.margin,"string"==typeof r.width&&/%$/.test(r.width)&&(r.width=parseInt(r.width,10)/100*r.presentationWidth),"string"==typeof r.height&&/%$/.test(r.height)&&(r.height=parseInt(r.height,10)/100*r.presentationHeight),r}function he(e,t){"object"==typeof e&&"function"==typeof e.setAttribute&&e.setAttribute("data-previous-indexv",t||0)}function ge(e){if("object"==typeof e&&"function"==typeof e.setAttribute&&e.classList.contains("stack")){var t=e.hasAttribute("data-start-indexv")?"data-start-indexv":"data-previous-indexv";return parseInt(e.getAttribute(t)||0,10)}return 0}function me(){if(u.overview&&!ke()){v=!0,k.wrapper.classList.add("overview"),k.wrapper.classList.remove("overview-deactivating"),S.overviewTransitions&&setTimeout((function(){k.wrapper.classList.add("overview-animated")}),1),kt(),k.slides.appendChild(k.background),J(k.wrapper.querySelectorAll(".slides section")).forEach((function(e){e.classList.contains("stack")||e.addEventListener("click",Gt,!0)}));var e=ve();h=e.width+70,g=e.height+70,u.rtl&&(h=-h),ze(),be(),ye(),pe(),ie("overviewshown",{indexh:t,indexv:r,currentSlide:a})}}function be(){J(k.wrapper.querySelectorAll(".slides>section")).forEach((function(e,t){e.setAttribute("data-index-h",t),Z(e,"translate3d("+t*h+"px, 0, 0)"),e.classList.contains("stack")&&J(e.querySelectorAll("section")).forEach((function(e,r){e.setAttribute("data-index-h",t),e.setAttribute("data-index-v",r),Z(e,"translate3d(0, "+r*g+"px, 0)")}))})),J(k.background.childNodes).forEach((function(e,t){Z(e,"translate3d("+t*h+"px, 0, 0)"),J(e.querySelectorAll(".slide-background")).forEach((function(e,t){Z(e,"translate3d(0, "+t*g+"px, 0)")}))}))}function ye(){var e=Math.min(window.innerWidth,window.innerHeight);G({overview:["scale("+Math.max(e/5,150)/e+")","translateX("+-t*h+"px)","translateY("+-r*g+"px)"].join(" ")})}function we(){u.overview&&(v=!1,k.wrapper.classList.remove("overview"),k.wrapper.classList.remove("overview-animated"),k.wrapper.classList.add("overview-deactivating"),setTimeout((function(){k.wrapper.classList.remove("overview-deactivating")}),1),k.wrapper.appendChild(k.background),J(k.wrapper.querySelectorAll(".slides section")).forEach((function(e){Z(e,""),e.removeEventListener("click",Gt,!0)})),J(k.background.querySelectorAll(".slide-background")).forEach((function(e){Z(e,"")})),G({overview:""}),Pe(t,r),pe(),At(),ie("overviewhidden",{indexh:t,indexv:r,currentSlide:a}))}function Ae(e){"boolean"==typeof e?e?me():we():ke()?we():me()}function ke(){return v}function Le(e){var t="/",r=e||a,n=r?r.getAttribute("id"):null;n&&(n=encodeURIComponent(n));var i=it(e);if(u.fragmentInURL||(i.f=void 0),"string"==typeof n&&n.length&&void 0===i.f)t="/"+n;else{var o=u.hashOneBasedIndex?1:0;(i.h>0||i.v>0||void 0!==i.f)&&(t+=i.h+o),(i.v>0||void 0!==i.f)&&(t+="/"+(i.v+o)),void 0!==i.f&&(t+="/"+i.f)}return t}function Ee(e){return(e=e||a)&&e.parentNode&&!!e.parentNode.nodeName.match(/section/i)}function Se(){M&&(M=!1,k.wrapper.style.cursor="")}function xe(){!1===M&&(M=!0,k.wrapper.style.cursor="none")}function qe(){if(u.pause){var e=k.wrapper.classList.contains("paused");kt(),k.wrapper.classList.add("paused"),!1===e&&ie("paused")}}function Me(){var e=k.wrapper.classList.contains("paused");k.wrapper.classList.remove("paused"),At(),e&&ie("resumed")}function Ne(e){"boolean"==typeof e?e?qe():Me():Ie()?Me():qe()}function Ie(){return k.wrapper.classList.contains("paused")}function Te(e){"boolean"==typeof e?e?Et():Lt():H?Et():Lt()}function Pe(e,i,o,s){n=a;var l=k.wrapper.querySelectorAll(".slides>section");if(0!==l.length){void 0!==i||ke()||(i=ge(l[e])),n&&n.parentNode&&n.parentNode.classList.contains("stack")&&he(n.parentNode,r);var c=y.concat();y.length=0;var d=t||0,u=r||0;t=Be(".slides>section",void 0===e?t:e),r=Be(".slides>section.present>section",void 0===i?r:i),ze(),pe(),ke()&&ye();var p=l[t],f=p.querySelectorAll("section");a=f[r]||p,void 0!==o&&bt(o);var v=t!==d||r!==u;v||(n=null),n&&n!==a&&(n.classList.remove("present"),n.setAttribute("aria-hidden","true"),k.wrapper.querySelector(".slides>section:first-of-type").classList.contains("present")&&setTimeout((function(){var e,t=J(k.wrapper.querySelectorAll(".slides>section.stack"));for(e in t)t[e]&&he(t[e],0)}),0));e:for(var h=0,g=y.length;h<g;h++){for(var m=0;m<c.length;m++)if(c[m]===y[h]){c.splice(m,1);continue e}document.documentElement.classList.add(y[h]),ie(y[h])}for(;c.length;)document.documentElement.classList.remove(c.pop());v&&ie("slidechanged",{indexh:t,indexv:r,previousSlide:n,currentSlide:a,origin:s}),!v&&n||(Ge(n),Je(a)),k.statusDiv.textContent=F(a),Ue(),Oe(),Ve(),Ke(),We(),De(),mt(),at(),At()}}function Ce(){var e;_(),X(),pe(),T=u.autoSlide,At(),ne(),k.background.innerHTML="",k.background.classList.add("no-transition"),J(k.wrapper.querySelectorAll(".slides>section")).forEach((function(e){var t=K(e,k.background);J(e.querySelectorAll("section")).forEach((function(e){K(e,t),t.classList.add("stack")}))})),u.parallaxBackgroundImage?(k.background.style.backgroundImage='url("'+u.parallaxBackgroundImage+'")',k.background.style.backgroundSize=u.parallaxBackgroundSize,k.background.style.backgroundRepeat=u.parallaxBackgroundRepeat,k.background.style.backgroundPosition=u.parallaxBackgroundPosition,setTimeout((function(){k.wrapper.classList.add("has-parallax-background")}),1)):(k.background.style.backgroundImage="",k.wrapper.classList.remove("has-parallax-background")),at(),J(k.wrapper.querySelectorAll(".slides>section")).forEach((function(e){var t=J(e.querySelectorAll("section"));t.forEach((function(e,t){gt(e.querySelectorAll(".fragment"))})),0===t.length&&gt(e.querySelectorAll(".fragment"))})),Ue(),Oe(),We(),ze(),Ve(!0),u.showNotes&&k.slides.querySelectorAll("[data-notes], aside.notes").length>0?k.wrapper.classList.add("show-notes"):k.wrapper.classList.remove("show-notes"),De(),(e=function(e,t,r){J(k.slides.querySelectorAll("iframe["+e+'*="'+t+'"]')).forEach((function(t){var n=t.getAttribute(e);n&&-1===n.indexOf(r)&&t.setAttribute(e,n+(/\?/.test(n)?"&":"?")+r)}))})("src","youtube.com/embed/","enablejsapi=1"),e("data-src","youtube.com/embed/","enablejsapi=1"),e("src","player.vimeo.com/","api=1"),e("data-src","player.vimeo.com/","api=1"),!1===u.autoPlayMedia?Ge(a,{unloadIframes:!1}):Je(a),ke()&&be()}function He(e){return gt((e=e||a).querySelectorAll(".fragment"))}function Re(){var e=J(k.wrapper.querySelectorAll(".slides>section"));e.forEach((function(t){k.slides.insertBefore(t,e[Math.floor(Math.random()*e.length)])}))}function Be(e,t){var r=J(k.wrapper.querySelectorAll(e)),n=r.length,a=ne();if(n){u.loop&&(t%=n)<0&&(t=n+t),t=Math.max(Math.min(t,n-1),0);for(var i=0;i<n;i++){var o=r[i],s=u.rtl&&!Ee(o);o.classList.remove("past"),o.classList.remove("present"),o.classList.remove("future"),o.setAttribute("hidden",""),o.setAttribute("aria-hidden","true"),o.querySelector("section")&&o.classList.add("stack"),a?o.classList.add("present"):i<t?(o.classList.add(s?"future":"past"),u.fragments&&J(o.querySelectorAll(".fragment")).forEach((function(e){e.classList.add("visible"),e.classList.remove("current-fragment")}))):i>t&&(o.classList.add(s?"past":"future"),u.fragments&&J(o.querySelectorAll(".fragment.visible")).forEach((function(e){e.classList.remove("visible"),e.classList.remove("current-fragment")})))}r[t].classList.add("present"),r[t].removeAttribute("hidden"),r[t].removeAttribute("aria-hidden");var l=r[t].getAttribute("data-state");l&&(y=y.concat(l.split(" ")))}else t=0;return t}function ze(){var e,n=J(k.wrapper.querySelectorAll(".slides>section")),a=n.length;if(a&&void 0!==t){var i=ke()?10:u.viewDistance;o&&(i=ke()?6:u.mobileViewDistance),ne()&&(i=Number.MAX_VALUE);for(var s=0;s<a;s++){var l=n[s],c=J(l.querySelectorAll("section")),d=c.length;if(e=Math.abs((t||0)-s)||0,u.loop&&(e=Math.abs(((t||0)-s)%(a-i))||0),e<i?Ye(l):Xe(l),d)for(var p=ge(l),f=0;f<d;f++){var v=c[f];e+(s===(t||0)?Math.abs((r||0)-f):Math.abs(f-p))<i?Ye(v):Xe(v)}}dt()?k.wrapper.classList.add("has-vertical-slides"):k.wrapper.classList.remove("has-vertical-slides"),ct()?k.wrapper.classList.add("has-horizontal-slides"):k.wrapper.classList.remove("has-horizontal-slides")}}function De(){u.showNotes&&k.speakerNotes&&a&&!ne()&&(k.speakerNotes.innerHTML=vt()||'<span class="notes-placeholder">No notes on this slide.</span>')}function Oe(){u.progress&&k.progressbar&&(k.progressbar.style.width=tt()*k.wrapper.offsetWidth+"px")}function We(){u.slideNumber&&k.slideNumber&&(k.slideNumber.innerHTML=Fe())}function Fe(e){var t,r="h.v";if(void 0===e&&(e=a),"function"==typeof u.slideNumber)t=u.slideNumber(e);else switch("string"==typeof u.slideNumber&&(r=u.slideNumber),/c/.test(r)||1!==k.wrapper.querySelectorAll(".slides>section").length||(r="c"),t=[],r){case"c":t.push(et(e)+1);break;case"c/t":t.push(et(e)+1,"/",ut());break;default:var n=it(e);t.push(n.h+1);var i="h/v"===r?"/":".";Ee(e)&&t.push(i,n.v+1)}var o="#"+Le(e);return function(e,t,r,n){return void 0===n&&(n="#"+Le()),"number"!=typeof r||isNaN(r)?'<a href="'+n+'"><span class="slide-number-a">'+e+"</span></a>":'<a href="'+n+'"><span class="slide-number-a">'+e+'</span><span class="slide-number-delimiter">'+t+'</span><span class="slide-number-b">'+r+"</span></a>"}(t[0],t[1],t[2],o)}function Ue(){var e=_e(),t=$e();k.controlsLeft.concat(k.controlsRight).concat(k.controlsUp).concat(k.controlsDown).concat(k.controlsPrev).concat(k.controlsNext).forEach((function(e){e.classList.remove("enabled"),e.classList.remove("fragmented"),e.setAttribute("disabled","disabled")})),e.left&&k.controlsLeft.forEach((function(e){e.classList.add("enabled"),e.removeAttribute("disabled")})),e.right&&k.controlsRight.forEach((function(e){e.classList.add("enabled"),e.removeAttribute("disabled")})),e.up&&k.controlsUp.forEach((function(e){e.classList.add("enabled"),e.removeAttribute("disabled")})),e.down&&k.controlsDown.forEach((function(e){e.classList.add("enabled"),e.removeAttribute("disabled")})),(e.left||e.up)&&k.controlsPrev.forEach((function(e){e.classList.add("enabled"),e.removeAttribute("disabled")})),(e.right||e.down)&&k.controlsNext.forEach((function(e){e.classList.add("enabled"),e.removeAttribute("disabled")})),a&&(t.prev&&k.controlsPrev.forEach((function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")})),t.next&&k.controlsNext.forEach((function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")})),Ee(a)?(t.prev&&k.controlsUp.forEach((function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")})),t.next&&k.controlsDown.forEach((function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")}))):(t.prev&&k.controlsLeft.forEach((function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")})),t.next&&k.controlsRight.forEach((function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")})))),u.controlsTutorial&&(!b&&e.down?k.controlsDownArrow.classList.add("highlight"):(k.controlsDownArrow.classList.remove("highlight"),!m&&e.right&&0===r?k.controlsRightArrow.classList.add("highlight"):k.controlsRightArrow.classList.remove("highlight")))}function Ve(e){var n=null,o=u.rtl?"future":"past",s=u.rtl?"past":"future";if(J(k.background.childNodes).forEach((function(a,i){a.classList.remove("past"),a.classList.remove("present"),a.classList.remove("future"),i<t?a.classList.add(o):i>t?a.classList.add(s):(a.classList.add("present"),n=a),(e||i===t)&&J(a.querySelectorAll(".slide-background")).forEach((function(e,a){e.classList.remove("past"),e.classList.remove("present"),e.classList.remove("future"),a<r?e.classList.add("past"):a>r?e.classList.add("future"):(e.classList.add("present"),i===t&&(n=e))}))})),i&&Ge(i,{unloadIframes:!je(i)}),n){Je(n);var l=n.querySelector(".slide-background-content");if(l){var c=l.style.backgroundImage||"";/\.gif/i.test(c)&&(l.style.backgroundImage="",window.getComputedStyle(l).opacity,l.style.backgroundImage=c)}var d=i?i.getAttribute("data-background-hash"):null,p=n.getAttribute("data-background-hash");p&&p===d&&n!==i&&k.background.classList.add("no-transition"),i=n}a&&["has-light-background","has-dark-background"].forEach((function(e){a.classList.contains(e)?k.wrapper.classList.add(e):k.wrapper.classList.remove(e)})),setTimeout((function(){k.background.classList.remove("no-transition")}),1)}function Ke(){if(u.parallaxBackgroundImage){var e,n,a=k.wrapper.querySelectorAll(".slides>section"),i=k.wrapper.querySelectorAll(".slides>section.present>section"),o=k.background.style.backgroundSize.split(" ");1===o.length?e=n=parseInt(o[0],10):(e=parseInt(o[0],10),n=parseInt(o[1],10));var s,l=k.background.offsetWidth,c=a.length;s=("number"==typeof u.parallaxBackgroundHorizontal?u.parallaxBackgroundHorizontal:c>1?(e-l)/(c-1):0)*t*-1;var d,p,f=k.background.offsetHeight,v=i.length;d="number"==typeof u.parallaxBackgroundVertical?u.parallaxBackgroundVertical:(n-f)/(v-1),p=v>0?d*r:0,k.background.style.backgroundPosition=s+"px "+-p+"px"}}function je(e){var t=u.preloadIframes;return"boolean"!=typeof t&&(t=e.hasAttribute("data-preload")),t}function Ye(e,t){t=t||{},e.style.display=u.display,J(e.querySelectorAll("img[data-src], video[data-src], audio[data-src], iframe[data-src]")).forEach((function(e){("IFRAME"!==e.tagName||je(e))&&(e.setAttribute("src",e.getAttribute("data-src")),e.setAttribute("data-lazy-loaded",""),e.removeAttribute("data-src"))})),J(e.querySelectorAll("video, audio")).forEach((function(e){var t=0;J(e.querySelectorAll("source[data-src]")).forEach((function(e){e.setAttribute("src",e.getAttribute("data-src")),e.removeAttribute("data-src"),e.setAttribute("data-lazy-loaded",""),t+=1})),t>0&&e.load()}));var r=e.slideBackgroundElement;if(r){r.style.display="block";var n=e.slideBackgroundContentElement,a=e.getAttribute("data-background-iframe");if(!1===r.hasAttribute("data-loaded")){r.setAttribute("data-loaded","true");var i=e.getAttribute("data-background-image"),s=e.getAttribute("data-background-video"),l=e.hasAttribute("data-background-video-loop"),c=e.hasAttribute("data-background-video-muted");if(i)n.style.backgroundImage="url("+encodeURI(i)+")";else if(s&&!rt()){var d=document.createElement("video");l&&d.setAttribute("loop",""),c&&(d.muted=!0),o&&(d.muted=!0,d.autoplay=!0,d.setAttribute("playsinline","")),s.split(",").forEach((function(e){d.innerHTML+='<source src="'+e+'">'})),n.appendChild(d)}else if(a&&!0!==t.excludeIframes){var p=document.createElement("iframe");p.setAttribute("allowfullscreen",""),p.setAttribute("mozallowfullscreen",""),p.setAttribute("webkitallowfullscreen",""),p.setAttribute("allow","autoplay"),p.setAttribute("data-src",a),p.style.width="100%",p.style.height="100%",p.style.maxHeight="100%",p.style.maxWidth="100%",n.appendChild(p)}}var f=n.querySelector("iframe[data-src]");f&&je(r)&&!/autoplay=(1|true|yes)/gi.test(a)&&f.getAttribute("src")!==a&&f.setAttribute("src",a)}}function Xe(e){e.style.display="none";var t=ft(e);t&&(t.style.display="none",J(t.querySelectorAll("iframe[src]")).forEach((function(e){e.removeAttribute("src")}))),J(e.querySelectorAll("video[data-lazy-loaded][src], audio[data-lazy-loaded][src], iframe[data-lazy-loaded][src]")).forEach((function(e){e.setAttribute("data-src",e.getAttribute("src")),e.removeAttribute("src")})),J(e.querySelectorAll("video[data-lazy-loaded] source[src], audio source[src]")).forEach((function(e){e.setAttribute("data-src",e.getAttribute("src")),e.removeAttribute("src")}))}function _e(){var e=k.wrapper.querySelectorAll(".slides>section"),n=k.wrapper.querySelectorAll(".slides>section.present>section"),a={left:t>0,right:t<e.length-1,up:r>0,down:r<n.length-1};if(u.loop&&(e.length>1&&(a.left=!0,a.right=!0),n.length>1&&(a.up=!0,a.down=!0)),u.rtl){var i=a.left;a.left=a.right,a.right=i}return a}function $e(){if(a&&u.fragments){var e=a.querySelectorAll(".fragment"),t=a.querySelectorAll(".fragment:not(.visible)");return{prev:e.length-t.length>0,next:!!t.length}}return{prev:!1,next:!1}}function Je(e){e&&!rt()&&(J(e.querySelectorAll('img[src$=".gif"]')).forEach((function(e){e.setAttribute("src",e.getAttribute("src"))})),J(e.querySelectorAll("video, audio")).forEach((function(e){if(!te(e,".fragment")||te(e,".fragment.visible")){var t=u.autoPlayMedia;if("boolean"!=typeof t&&(t=e.hasAttribute("data-autoplay")||!!te(e,".slide-background")),t&&"function"==typeof e.play)if(e.readyState>1)Qe({target:e});else if(o){var r=e.play();r&&"function"==typeof r.catch&&!1===e.controls&&r.catch((function(){e.controls=!0,e.addEventListener("play",(function(){e.controls=!1}))}))}else e.removeEventListener("loadeddata",Qe),e.addEventListener("loadeddata",Qe)}})),J(e.querySelectorAll("iframe[src]")).forEach((function(e){te(e,".fragment")&&!te(e,".fragment.visible")||Ze({target:e})})),J(e.querySelectorAll("iframe[data-src]")).forEach((function(e){te(e,".fragment")&&!te(e,".fragment.visible")||e.getAttribute("src")!==e.getAttribute("data-src")&&(e.removeEventListener("load",Ze),e.addEventListener("load",Ze),e.setAttribute("src",e.getAttribute("data-src")))})))}function Qe(e){var t=!!te(e.target,"html"),r=!!te(e.target,".present");t&&r&&(e.target.currentTime=0,e.target.play()),e.target.removeEventListener("loadeddata",Qe)}function Ze(e){var t=e.target;if(t&&t.contentWindow){var r=!!te(e.target,"html"),n=!!te(e.target,".present");if(r&&n){var a=u.autoPlayMedia;"boolean"!=typeof a&&(a=t.hasAttribute("data-autoplay")||!!te(t,".slide-background")),/youtube\.com\/embed\//.test(t.getAttribute("src"))&&a?t.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*"):/player\.vimeo\.com\//.test(t.getAttribute("src"))&&a?t.contentWindow.postMessage('{"method":"play"}',"*"):t.contentWindow.postMessage("slide:start","*")}}}function Ge(e,t){t=$({unloadIframes:!0},t||{}),e&&e.parentNode&&(J(e.querySelectorAll("video, audio")).forEach((function(e){e.hasAttribute("data-ignore")||"function"!=typeof e.pause||(e.setAttribute("data-paused-by-reveal",""),e.pause())})),J(e.querySelectorAll("iframe")).forEach((function(e){e.contentWindow&&e.contentWindow.postMessage("slide:stop","*"),e.removeEventListener("load",Ze)})),J(e.querySelectorAll('iframe[src*="youtube.com/embed/"]')).forEach((function(e){!e.hasAttribute("data-ignore")&&e.contentWindow&&"function"==typeof e.contentWindow.postMessage&&e.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")})),J(e.querySelectorAll('iframe[src*="player.vimeo.com/"]')).forEach((function(e){!e.hasAttribute("data-ignore")&&e.contentWindow&&"function"==typeof e.contentWindow.postMessage&&e.contentWindow.postMessage('{"method":"pause"}',"*")})),!0===t.unloadIframes&&J(e.querySelectorAll("iframe[data-src]")).forEach((function(e){e.setAttribute("src","about:blank"),e.removeAttribute("src")})))}function et(e){void 0===e&&(e=a);var t=J(k.wrapper.querySelectorAll(".slides>section")),r=0;e:for(var n=0;n<t.length;n++){for(var i=t[n],o=J(i.querySelectorAll("section")),s=0;s<o.length;s++){if(o[s]===e)break e;r++}if(i===e)break;!1===i.classList.contains("stack")&&r++}return r}function tt(){var e=ut(),t=et();if(a){var r=a.querySelectorAll(".fragment");r.length>0&&(t+=a.querySelectorAll(".fragment.visible").length/r.length*.9)}return Math.min(t/(e-1),1)}function rt(){return!!window.location.search.match(/receiver/gi)}function nt(){var n=window.location.hash,i=n.slice(2).split("/"),o=n.replace(/#|\//gi,"");if(!/^[0-9]*$/.test(i[0])&&o.length){var s;try{s=document.getElementById(decodeURIComponent(o))}catch(e){}var l=!!a&&a.getAttribute("id")===o;if(s){if(!l){var c=e.getIndices(s);Pe(c.h,c.v)}}else Pe(t||0,r||0)}else{var d,p=u.hashOneBasedIndex?1:0,f=parseInt(i[0],10)-p||0,v=parseInt(i[1],10)-p||0;u.fragmentInURL&&(d=parseInt(i[2],10),isNaN(d)&&(d=void 0)),f===t&&v===r&&void 0===d||Pe(f,v,d)}}function at(e){clearTimeout(q),"number"==typeof e?q=setTimeout(at,e):a&&(u.history||!window.history?window.location.hash=Le():u.hash?window.history.replaceState(null,null,"#"+Le()):window.history.replaceState(null,null,window.location.pathname+window.location.search))}function it(e){var n,i=t,o=r;if(e){var s=Ee(e),l=s?e.parentNode:e,c=J(k.wrapper.querySelectorAll(".slides>section"));i=Math.max(c.indexOf(l),0),o=void 0,s&&(o=Math.max(J(e.parentNode.querySelectorAll("section")).indexOf(e),0))}if(!e&&a&&a.querySelectorAll(".fragment").length>0){var d=a.querySelector(".current-fragment");n=d&&d.hasAttribute("data-fragment-index")?parseInt(d.getAttribute("data-fragment-index"),10):a.querySelectorAll(".fragment.visible").length-1}return{h:i,v:o,f:n}}function ot(){return J(k.wrapper.querySelectorAll(".slides section:not(.stack)"))}function st(){return J(k.wrapper.querySelectorAll(".slides>section"))}function lt(){return J(k.wrapper.querySelectorAll(".slides>section>section"))}function ct(){return st().length>1}function dt(){return lt().length>1}function ut(){return ot().length}function pt(e,t){var r=k.wrapper.querySelectorAll(".slides>section")[e],n=r&&r.querySelectorAll("section");return n&&n.length&&"number"==typeof t?n?n[t]:void 0:r}function ft(e,t){var r="number"==typeof e?pt(e,t):e;if(r)return r.slideBackgroundElement}function vt(e){if((e=e||a).hasAttribute("data-notes"))return e.getAttribute("data-notes");var t=e.querySelector("aside.notes");return t?t.innerHTML:null}function ht(){var e=it();return{indexh:e.h,indexv:e.v,indexf:e.f,paused:Ie(),overview:ke()}}function gt(e,t){e=J(e);var r=[],n=[],a=[];e.forEach((function(e,t){if(e.hasAttribute("data-fragment-index")){var a=parseInt(e.getAttribute("data-fragment-index"),10);r[a]||(r[a]=[]),r[a].push(e)}else n.push([e])})),r=r.concat(n);var i=0;return r.forEach((function(e){e.forEach((function(e){a.push(e),e.setAttribute("data-fragment-index",i)})),i++})),!0===t?r:a}function mt(e,t){var r={shown:[],hidden:[]};if(a&&u.fragments&&(t=t||gt(a.querySelectorAll(".fragment"))).length){var n=0;if("number"!=typeof e){var i=gt(a.querySelectorAll(".fragment.visible")).pop();i&&(e=parseInt(i.getAttribute("data-fragment-index")||0,10))}J(t).forEach((function(t,a){t.hasAttribute("data-fragment-index")&&(a=parseInt(t.getAttribute("data-fragment-index"),10)),n=Math.max(n,a),a<=e?(t.classList.contains("visible")||r.shown.push(t),t.classList.add("visible"),t.classList.remove("current-fragment"),k.statusDiv.textContent=F(t),a===e&&(t.classList.add("current-fragment"),Je(t))):(t.classList.contains("visible")&&r.hidden.push(t),t.classList.remove("visible"),t.classList.remove("current-fragment"))})),e="number"==typeof e?e:-1,e=Math.max(Math.min(e,n),-1),a.setAttribute("data-fragment",e)}return r}function bt(e,t){if(a&&u.fragments){var r=gt(a.querySelectorAll(".fragment"));if(r.length){if("number"!=typeof e){var n=gt(a.querySelectorAll(".fragment.visible")).pop();e=n?parseInt(n.getAttribute("data-fragment-index")||0,10):-1}"number"==typeof t&&(e+=t);var i=mt(e,r);return i.hidden.length&&ie("fragmenthidden",{fragment:i.hidden[0],fragments:i.hidden}),i.shown.length&&ie("fragmentshown",{fragment:i.shown[0],fragments:i.shown}),Ue(),Oe(),u.fragmentInURL&&at(),!(!i.shown.length&&!i.hidden.length)}}return!1}function yt(){return bt(null,1)}function wt(){return bt(null,-1)}function At(){if(kt(),a&&!1!==u.autoSlide){var t=a.querySelector(".current-fragment");t||(t=a.querySelector(".fragment"));var r=t?t.getAttribute("data-autoslide"):null,n=a.parentNode?a.parentNode.getAttribute("data-autoslide"):null,i=a.getAttribute("data-autoslide");T=r?parseInt(r,10):i?parseInt(i,10):n?parseInt(n,10):u.autoSlide,0===a.querySelectorAll(".fragment").length&&J(a.querySelectorAll("video, audio")).forEach((function(e){e.hasAttribute("data-autoplay")&&T&&1e3*e.duration/e.playbackRate>T&&(T=1e3*e.duration/e.playbackRate+1e3)})),!T||H||Ie()||ke()||e.isLastSlide()&&!$e().next&&!0!==u.loop||(P=setTimeout((function(){"function"==typeof u.autoSlideMethod?u.autoSlideMethod():It(),At()}),T),C=Date.now()),l&&l.setPlaying(-1!==P)}}function kt(){clearTimeout(P),P=-1}function Lt(){T&&!H&&(H=!0,ie("autoslidepaused"),clearTimeout(P),l&&l.setPlaying(!1))}function Et(){T&&H&&(H=!1,ie("autoslideresumed"),At())}function St(){u.rtl?(ke()||!1===yt())&&_e().left&&Pe(t+1,"grid"===u.navigationMode?r:void 0):(ke()||!1===wt())&&_e().left&&Pe(t-1,"grid"===u.navigationMode?r:void 0)}function xt(){m=!0,u.rtl?(ke()||!1===wt())&&_e().right&&Pe(t-1,"grid"===u.navigationMode?r:void 0):(ke()||!1===yt())&&_e().right&&Pe(t+1,"grid"===u.navigationMode?r:void 0)}function qt(){(ke()||!1===wt())&&_e().up&&Pe(t,r-1)}function Mt(){b=!0,(ke()||!1===yt())&&_e().down&&Pe(t,r+1)}function Nt(){var e;if(!1===wt())if(_e().up)qt();else if(e=u.rtl?J(k.wrapper.querySelectorAll(".slides>section.future")).pop():J(k.wrapper.querySelectorAll(".slides>section.past")).pop()){var r=e.querySelectorAll("section").length-1||void 0;Pe(t-1,r)}}function It(){if(m=!0,b=!0,!1===yt()){var t=_e();t.down&&t.right&&u.loop&&e.isLastVerticalSlide(a)&&(t.down=!1),t.down?Mt():u.rtl?St():xt()}}function Tt(e){for(;e&&"function"==typeof e.hasAttribute;){if(e.hasAttribute("data-prevent-swipe"))return!0;e=e.parentNode}return!1}function Pt(e){u.autoSlideStoppable&&Lt()}function Ct(e){Se(),clearTimeout(N),N=setTimeout(xe,u.hideCursorTime)}function Ht(e){e.shiftKey&&63===e.charCode&&ce()}function Rt(t){if("function"==typeof u.keyboardCondition&&!1===u.keyboardCondition(t))return!0;var r=t.keyCode,n=H;Pt();var a=document.activeElement&&"inherit"!==document.activeElement.contentEditable,i=document.activeElement&&document.activeElement.tagName&&/input|textarea/i.test(document.activeElement.tagName),o=document.activeElement&&document.activeElement.className&&/speaker-notes/i.test(document.activeElement.className),s=t.shiftKey&&32===t.keyCode,l=t.shiftKey&&37===r,c=t.shiftKey&&39===r,d=!s&&!l&&!c&&(t.shiftKey||t.altKey||t.ctrlKey||t.metaKey);if(!(a||i||o||d)){var p,f=[66,86,190,191];if("object"==typeof u.keyboard)for(p in u.keyboard)"togglePause"===u.keyboard[p]&&f.push(parseInt(p,10));if(Ie()&&-1===f.indexOf(r))return!1;var v,h,g="linear"===u.navigationMode||!ct()||!dt(),m=!1;if("object"==typeof u.keyboard)for(p in u.keyboard)if(parseInt(p,10)===r){var b=u.keyboard[p];"function"==typeof b?b.apply(null,[t]):"string"==typeof b&&"function"==typeof e[b]&&e[b].call(),m=!0}if(!1===m)for(p in z)if(parseInt(p,10)===r){var y=z[p].callback;"function"==typeof y?y.apply(null,[t]):"string"==typeof y&&"function"==typeof e[y]&&e[y].call(),m=!0}!1===m&&(m=!0,80===r||33===r?Nt():78===r||34===r?It():72===r||37===r?l?Pe(0):!ke()&&g?Nt():St():76===r||39===r?c?Pe(Number.MAX_VALUE):!ke()&&g?It():xt():75===r||38===r?!ke()&&g?Nt():qt():74===r||40===r?!ke()&&g?It():Mt():36===r?Pe(0):35===r?Pe(Number.MAX_VALUE):32===r?(ke()&&we(),t.shiftKey?Nt():It()):58===r||59===r||66===r||86===r||190===r||191===r?Ne():70===r?(v=document.documentElement,(h=v.requestFullscreen||v.webkitRequestFullscreen||v.webkitRequestFullScreen||v.mozRequestFullScreen||v.msRequestFullscreen)&&h.apply(v)):65===r?u.autoSlideStoppable&&Te(n):m=!1),m?t.preventDefault&&t.preventDefault():27!==r&&79!==r||!S.transforms3d||(k.overlay?ue():Ae(),t.preventDefault&&t.preventDefault()),At()}}function Bt(e){if(Tt(e.target))return!0;R.startX=e.touches[0].clientX,R.startY=e.touches[0].clientY,R.startCount=e.touches.length}function zt(e){if(Tt(e.target))return!0;if(R.captured)c.match(/android/gi)&&e.preventDefault();else{Pt();var t=e.touches[0].clientX,r=e.touches[0].clientY;if(1===e.touches.length&&2!==R.startCount){var n=t-R.startX,i=r-R.startY;n>R.threshold&&Math.abs(n)>Math.abs(i)?(R.captured=!0,"linear"===u.navigationMode?u.rtl?It():Nt():St()):n<-R.threshold&&Math.abs(n)>Math.abs(i)?(R.captured=!0,"linear"===u.navigationMode?u.rtl?Nt():It():xt()):i>R.threshold?(R.captured=!0,"linear"===u.navigationMode?Nt():qt()):i<-R.threshold&&(R.captured=!0,"linear"===u.navigationMode?It():Mt()),u.embedded?(R.captured||Ee(a))&&e.preventDefault():e.preventDefault()}}}function Dt(e){R.captured=!1}function Ot(e){e.pointerType!==e.MSPOINTER_TYPE_TOUCH&&"touch"!==e.pointerType||(e.touches=[{clientX:e.clientX,clientY:e.clientY}],Bt(e))}function Wt(e){e.pointerType!==e.MSPOINTER_TYPE_TOUCH&&"touch"!==e.pointerType||(e.touches=[{clientX:e.clientX,clientY:e.clientY}],zt(e))}function Ft(e){e.pointerType!==e.MSPOINTER_TYPE_TOUCH&&"touch"!==e.pointerType||(e.touches=[{clientX:e.clientX,clientY:e.clientY}],Dt())}function Ut(e){if(Date.now()-x>600){x=Date.now();var t=e.detail||-e.wheelDelta;t>0?It():t<0&&Nt()}}function Vt(e){Pt(),e.preventDefault();var t=J(k.wrapper.querySelectorAll(".slides>section")).length,r=Math.floor(e.clientX/k.wrapper.offsetWidth*t);u.rtl&&(r=t-r),Pe(r)}function Kt(e){e.preventDefault(),Pt(),"linear"===u.navigationMode?Nt():St()}function jt(e){e.preventDefault(),Pt(),"linear"===u.navigationMode?It():xt()}function Yt(e){e.preventDefault(),Pt(),qt()}function Xt(e){e.preventDefault(),Pt(),Mt()}function _t(e){e.preventDefault(),Pt(),Nt()}function $t(e){e.preventDefault(),Pt(),It()}function Jt(e){nt()}function Qt(e){pe()}function Zt(e){!1===(document.webkitHidden||document.msHidden||document.hidden)&&document.activeElement!==document.body&&("function"==typeof document.activeElement.blur&&document.activeElement.blur(),document.body.focus())}function Gt(e){if(I&&ke()){e.preventDefault();for(var t=e.target;t&&!t.nodeName.match(/section/gi);)t=t.parentNode;t&&!t.classList.contains("disabled")&&(we(),t.nodeName.match(/section/gi)&&Pe(parseInt(t.getAttribute("data-index-h"),10),parseInt(t.getAttribute("data-index-v"),10)))}}function er(e){if(e.currentTarget&&e.currentTarget.hasAttribute("href")){var t=e.currentTarget.getAttribute("href");t&&(function(e){ue(),k.overlay=document.createElement("div"),k.overlay.classList.add("overlay"),k.overlay.classList.add("overlay-preview"),k.wrapper.appendChild(k.overlay),k.overlay.innerHTML=["<header>",'<a class="close" href="#"><span class="icon"></span></a>','<a class="external" href="'+e+'" target="_blank"><span class="icon"></span></a>',"</header>",'<div class="spinner"></div>','<div class="viewport">','<iframe src="'+e+'"></iframe>','<small class="viewport-inner">','<span class="x-frame-error">Unable to load iframe. This is likely due to the site\'s policy (x-frame-options).</span>',"</small>","</div>"].join(""),k.overlay.querySelector("iframe").addEventListener("load",(function(e){k.overlay.classList.add("loaded")}),!1),k.overlay.querySelector(".close").addEventListener("click",(function(e){ue(),e.preventDefault()}),!1),k.overlay.querySelector(".external").addEventListener("click",(function(e){ue()}),!1),setTimeout((function(){k.overlay.classList.add("visible")}),1)}(t),e.preventDefault())}}function tr(t){e.isLastSlide()&&!1===u.loop?(Pe(0,0),Et()):H?Et():Lt()}function rr(e,t){this.diameter=100,this.diameter2=this.diameter/2,this.thickness=6,this.playing=!1,this.progress=0,this.progressOffset=1,this.container=e,this.progressCheck=t,this.canvas=document.createElement("canvas"),this.canvas.className="playback",this.canvas.width=this.diameter,this.canvas.height=this.diameter,this.canvas.style.width=this.diameter2+"px",this.canvas.style.height=this.diameter2+"px",this.context=this.canvas.getContext("2d"),this.container.appendChild(this.canvas),this.render()}return rr.prototype.setPlaying=function(e){var t=this.playing;this.playing=e,!t&&this.playing?this.animate():this.render()},rr.prototype.animate=function(){var e=this.progress;this.progress=this.progressCheck(),e>.8&&this.progress<.2&&(this.progressOffset=this.progress),this.render(),this.playing&&S.requestAnimationFrameMethod.call(window,this.animate.bind(this))},rr.prototype.render=function(){var e=this.playing?this.progress:0,t=this.diameter2-this.thickness,r=this.diameter2,n=this.diameter2;this.progressOffset+=.1*(1-this.progressOffset);var a=-Math.PI/2+e*(2*Math.PI),i=-Math.PI/2+this.progressOffset*(2*Math.PI);this.context.save(),this.context.clearRect(0,0,this.diameter,this.diameter),this.context.beginPath(),this.context.arc(r,n,t+4,0,2*Math.PI,!1),this.context.fillStyle="rgba( 0, 0, 0, 0.4 )",this.context.fill(),this.context.beginPath(),this.context.arc(r,n,t,0,2*Math.PI,!1),this.context.lineWidth=this.thickness,this.context.strokeStyle="rgba( 255, 255, 255, 0.2 )",this.context.stroke(),this.playing&&(this.context.beginPath(),this.context.arc(r,n,t,i,a,!1),this.context.lineWidth=this.thickness,this.context.strokeStyle="#fff",this.context.stroke()),this.context.translate(r-14,n-14),this.playing?(this.context.fillStyle="#fff",this.context.fillRect(0,0,10,28),this.context.fillRect(18,0,10,28)):(this.context.beginPath(),this.context.translate(4,0),this.context.moveTo(0,0),this.context.lineTo(24,14),this.context.lineTo(0,28),this.context.fillStyle="#fff",this.context.fill()),this.context.restore()},rr.prototype.on=function(e,t){this.canvas.addEventListener(e,t,!1)},rr.prototype.off=function(e,t){this.canvas.removeEventListener(e,t,!1)},rr.prototype.destroy=function(){this.playing=!1,this.canvas.parentNode&&this.container.removeChild(this.canvas)},e={VERSION:"3.9.2",initialize:function(t){if(!0!==p)if(p=!0,function(){o=/(iphone|ipod|ipad|android)/gi.test(c)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1,s=/chrome/i.test(c)&&!/edge/i.test(c);var e=document.createElement("div");S.transforms3d="WebkitPerspective"in e.style||"MozPerspective"in e.style||"msPerspective"in e.style||"OPerspective"in e.style||"perspective"in e.style,S.transforms2d="WebkitTransform"in e.style||"MozTransform"in e.style||"msTransform"in e.style||"OTransform"in e.style||"transform"in e.style,S.requestAnimationFrameMethod=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame,S.requestAnimationFrame="function"==typeof S.requestAnimationFrameMethod,S.canvas=!!document.createElement("canvas").getContext,S.overviewTransitions=!/Version\/[\d\.]+.*Safari/.test(c),S.zoom="zoom"in e.style&&!o&&(s||/Version\/[\d\.]+.*Safari/.test(c))}(),S.transforms2d||S.transforms3d){k.wrapper=document.querySelector(".reveal"),k.slides=document.querySelector(".reveal .slides"),window.addEventListener("load",pe,!1);var r,n,a=e.getQueryHash();void 0!==a.dependencies&&delete a.dependencies,$(u,t),$(u,a),u.hideAddressBar&&o&&(window.addEventListener("load",ae,!1),window.addEventListener("orientationchange",ae,!1)),r=[],n=0,u.dependencies.forEach((function(e){e.condition&&!e.condition()||(e.async?E.push(e):r.push(e))})),r.length?(n=r.length,r.forEach((function(e){W(e.src,(function(){"function"==typeof e.callback&&e.callback(),0==--n&&D()}))}))):D()}else{document.body.setAttribute("class","no-transforms");for(var i=J(document.getElementsByTagName("img")),l=J(document.getElementsByTagName("iframe")),d=i.concat(l),f=0,v=d.length;f<v;f++){var h=d[f];h.getAttribute("data-src")&&(h.setAttribute("src",h.getAttribute("data-src")),h.removeAttribute("data-src"))}}},configure:Y,sync:Ce,syncSlide:function(e){j(e=e||a),He(e),Ye(e),Ve(),De()},syncFragments:He,slide:Pe,left:St,right:xt,up:qt,down:Mt,prev:Nt,next:It,navigateFragment:bt,prevFragment:wt,nextFragment:yt,navigateTo:Pe,navigateLeft:St,navigateRight:xt,navigateUp:qt,navigateDown:Mt,navigatePrev:Nt,navigateNext:It,layout:pe,shuffle:Re,availableRoutes:_e,availableFragments:$e,toggleHelp:ce,toggleOverview:Ae,togglePause:Ne,toggleAutoSlide:Te,isOverview:ke,isPaused:Ie,isAutoSliding:function(){return!(!T||H)},isSpeakerNotes:rt,loadSlide:Ye,unloadSlide:Xe,addEventListeners:X,removeEventListeners:_,getState:ht,setState:function(e){if("object"==typeof e){Pe(Q(e.indexh),Q(e.indexv),Q(e.indexf));var t=Q(e.paused),r=Q(e.overview);"boolean"==typeof t&&t!==Ie()&&Ne(t),"boolean"==typeof r&&r!==ke()&&Ae(r)}},getSlidePastCount:et,getProgress:tt,getIndices:it,getSlides:ot,getSlidesAttributes:function(){return ot().map((function(e){for(var t={},r=0;r<e.attributes.length;r++){var n=e.attributes[r];t[n.name]=n.value}return t}))},getTotalSlides:ut,getSlide:pt,getSlideBackground:ft,getSlideNotes:vt,getHorizontalSlides:st,getVerticalSlides:lt,hasHorizontalSlides:ct,hasVerticalSlides:dt,getPreviousSlide:function(){return n},getCurrentSlide:function(){return a},getScale:function(){return w},getConfig:function(){return u},getQueryHash:function(){var e={};for(var t in location.search.replace(/[A-Z0-9]+?=([\w\.%-]*)/gi,(function(t){e[t.split("=").shift()]=t.split("=").pop()})),e){var r=e[t];e[t]=Q(unescape(r))}return e},getRevealElement:function(){return k.wrapper||document.querySelector(".reveal")},getPlugins:function(){return L},isFirstSlide:function(){return 0===t&&0===r},isLastSlide:function(){return!(!a||a.nextElementSibling||Ee(a)&&a.parentNode.nextElementSibling)},isLastVerticalSlide:function(){return!(!a||!Ee(a)||a.nextElementSibling)},isReady:function(){return f},addEventListener:function(t,r,n){"addEventListener"in window&&e.getRevealElement().addEventListener(t,r,n)},removeEventListener:function(t,r,n){"addEventListener"in window&&e.getRevealElement().removeEventListener(t,r,n)},addKeyBinding:function(e,t){"object"==typeof e&&e.keyCode?z[e.keyCode]={callback:t,key:e.key,description:e.description}:z[e]={callback:t,key:null,description:null}},removeKeyBinding:function(e){delete z[e]},registerPlugin:function(e,t){void 0===L[e]?(L[e]=t,f&&"function"==typeof t.init&&t.init()):console.warn('reveal.js: "'+e+'" plugin has already been registered')},hasPlugin:function(e){return!!L[e]},getPlugin:function(e){return L[e]},triggerKey:function(e){Rt({keyCode:e})},registerKeyboardShortcut:function(e,t){B[e]=t}}}(),a.Reveal}.call(t,r,t,e))||(e.exports=n)}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,